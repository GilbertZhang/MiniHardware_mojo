/*
   This file was generated automatically by the Mojo IDE version B1.3.4.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg uinp1,
    output reg uinp2,
    output reg uinp3,
    input sum,
    input carryout,
    output reg [23:0] io_led
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  localparam A_state = 4'd0;
  localparam B_state = 4'd1;
  localparam C_state = 4'd2;
  localparam D_state = 4'd3;
  localparam E_state = 4'd4;
  localparam F_state = 4'd5;
  localparam G_state = 4'd6;
  localparam H_state = 4'd7;
  localparam FINISH_state = 4'd8;
  
  reg [3:0] M_state_d, M_state_q = A_state;
  reg [25:0] M_counter_d, M_counter_q = 1'h0;
  reg [26:0] M_hold_d, M_hold_q = 1'h0;
  
  always @* begin
    M_state_d = M_state_q;
    M_hold_d = M_hold_q;
    M_counter_d = M_counter_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    M_counter_d = M_counter_q + 1'h1;
    M_hold_d = M_hold_q + 1'h1;
    uinp1 = 1'h0;
    uinp2 = 1'h0;
    uinp3 = 1'h0;
    
    case (M_state_q)
      A_state: begin
        uinp1 = 1'h0;
        uinp2 = 1'h0;
        uinp3 = 1'h0;
        io_led[0+0+0-:1] = M_counter_q[24+0-:1];
        if (sum == 1'h0 && carryout == 1'h0 && M_hold_q[0+26-:27] == 1'h1) begin
          io_led[0+7-:8] = 8'h80;
          M_state_d = B_state;
        end
      end
      B_state: begin
        uinp1 = 1'h0;
        uinp2 = 1'h0;
        uinp3 = 1'h1;
        io_led[0+1+0-:1] = M_counter_q[24+0-:1];
        if (sum == 1'h1 && carryout == 1'h0 && M_hold_q[0+26-:27] == 1'h1) begin
          io_led[0+7-:8] = 8'hc0;
          M_state_d = C_state;
        end
      end
      C_state: begin
        uinp1 = 1'h0;
        uinp2 = 1'h1;
        uinp3 = 1'h0;
        io_led[0+2+0-:1] = M_counter_q[24+0-:1];
        if (sum == 1'h1 && carryout == 1'h0 && M_hold_q[0+26-:27] == 1'h1) begin
          io_led[0+7-:8] = 8'he0;
          M_state_d = D_state;
        end
      end
      D_state: begin
        uinp1 = 1'h0;
        uinp2 = 1'h1;
        uinp3 = 1'h1;
        io_led[0+3+0-:1] = M_counter_q[24+0-:1];
        if (sum == 1'h0 && carryout == 1'h1 && M_hold_q[0+26-:27] == 1'h1) begin
          io_led[0+7-:8] = 8'hf0;
          M_state_d = E_state;
        end
      end
      E_state: begin
        uinp1 = 1'h1;
        uinp2 = 1'h0;
        uinp3 = 1'h0;
        io_led[0+4+0-:1] = M_counter_q[24+0-:1];
        if (sum == 1'h1 && carryout == 1'h0 && M_hold_q[0+26-:27] == 1'h1) begin
          io_led[0+7-:8] = 8'hf8;
          M_state_d = F_state;
        end
      end
      F_state: begin
        uinp1 = 1'h1;
        uinp2 = 1'h0;
        uinp3 = 1'h1;
        io_led[0+5+0-:1] = M_counter_q[24+0-:1];
        if (sum == 1'h0 && carryout == 1'h1 && M_hold_q[0+26-:27] == 1'h1) begin
          io_led[0+7-:8] = 8'hfc;
          M_state_d = G_state;
        end
      end
      G_state: begin
        uinp1 = 1'h1;
        uinp2 = 1'h1;
        uinp3 = 1'h0;
        io_led[0+6+0-:1] = M_counter_q[24+0-:1];
        if (sum == 1'h0 && carryout == 1'h1 && M_hold_q[0+26-:27] == 1'h1) begin
          io_led[0+7-:8] = 8'hfe;
          M_state_d = H_state;
        end
      end
      H_state: begin
        uinp1 = 1'h1;
        uinp2 = 1'h1;
        uinp3 = 1'h1;
        io_led[0+7+0-:1] = M_counter_q[24+0-:1];
        if (sum == 1'h1 && carryout == 1'h1 && M_hold_q[0+26-:27] == 1'h1) begin
          io_led[0+7-:8] = 8'hff;
          M_state_d = FINISH_state;
        end
      end
      FINISH_state: begin
        io_led[0+7-:8] = {4'h8{M_counter_q[24+0-:1]}};
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_hold_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_hold_q <= M_hold_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
